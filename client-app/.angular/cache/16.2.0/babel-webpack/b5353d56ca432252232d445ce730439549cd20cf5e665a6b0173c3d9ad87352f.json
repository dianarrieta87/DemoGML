{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClientService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080/api/clients';\n  }\n  getClients() {\n    return this.http.get(this.baseUrl);\n  }\n  create(client) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(this.baseUrl, client, {\n      headers\n    }).pipe(map(response => response.client), catchError(error => {\n      console.error('Error creating the client:', error);\n      return throwError('Error creating the client');\n    }));\n  }\n  searchClientsByKey(sharedKey) {\n    const url = `${this.baseUrl}/${sharedKey}`;\n    return this.http.get(url).pipe(catchError(error => {\n      //console.error('Error searching clients:', error);\n      return throwError('Error searching clients');\n    }));\n  }\n}\n_class = ClientService;\n_class.ɵfac = function ClientService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","map","catchError","throwError","ClientService","constructor","http","baseUrl","getClients","get","create","client","headers","post","pipe","response","error","console","searchClientsByKey","sharedKey","url","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\adminDiana\\Documents\\proyectos\\DemoGML\\client-app\\src\\app\\client-main\\client.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Client } from './client';\nimport { HttpClient, HttpHeaders  } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n  private baseUrl = 'http://localhost:8080/api/clients';\n\n  constructor(private http: HttpClient) { }\n\n  getClients(): Observable<any> {\n    return this.http.get(this.baseUrl);\n  }\n\n  create(client:Client) : Observable<Client>{\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    return this.http.post(this.baseUrl, client, { headers }).pipe(\n      map((response: any) => response.client as Client),\n      catchError((error) => {\n        console.error('Error creating the client:', error);\n        return throwError('Error creating the client');\n      })\n    );  \n  }\n\n  searchClientsByKey(sharedKey: string): Observable<any> {\n    const url = `${this.baseUrl}/${sharedKey}`;\n    return this.http.get(url).pipe(\n      catchError((error) => {\n        //console.error('Error searching clients:', error);\n        return throwError('Error searching clients');\n      })\n    );\n  }\n\n  \n}\n"],"mappings":";AAEA,SAAqBA,WAAW,QAAS,sBAAsB;AAC/D,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;AAChD,SAAqBC,UAAU,QAAQ,MAAM;;;AAK7C,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,mCAAmC;EAEb;EAExCC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACF,OAAO,CAAC;EACpC;EAEAG,MAAMA,CAACC,MAAa;IAClB,MAAMC,OAAO,GAAG,IAAIZ,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,OAAO,IAAI,CAACM,IAAI,CAACO,IAAI,CAAC,IAAI,CAACN,OAAO,EAAEI,MAAM,EAAE;MAAEC;IAAO,CAAE,CAAC,CAACE,IAAI,CAC3Db,GAAG,CAAEc,QAAa,IAAKA,QAAQ,CAACJ,MAAgB,CAAC,EACjDT,UAAU,CAAEc,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOb,UAAU,CAAC,2BAA2B,CAAC;IAChD,CAAC,CAAC,CACH;EACH;EAEAe,kBAAkBA,CAACC,SAAiB;IAClC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACb,OAAO,IAAIY,SAAS,EAAE;IAC1C,OAAO,IAAI,CAACb,IAAI,CAACG,GAAG,CAACW,GAAG,CAAC,CAACN,IAAI,CAC5BZ,UAAU,CAAEc,KAAK,IAAI;MACnB;MACA,OAAOb,UAAU,CAAC,yBAAyB,CAAC;IAC9C,CAAC,CAAC,CACH;EACH;;SA5BWC,aAAa;;mBAAbA,MAAa,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAbpB,MAAa;EAAAqB,OAAA,EAAbrB,MAAa,CAAAsB,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}